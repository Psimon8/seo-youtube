import requests
import streamlit as st
import plotly.express as px
from collections import defaultdict

# Configuration de la page Streamlit
st.set_page_config(
    layout="wide",
    page_title="YouTube Suggest Explorer",
    page_icon="üîç"
)

def fetch_suggestions(query: str) -> list:
    """R√©cup√®re les suggestions de recherche YouTube pour un mot-cl√© donn√©."""
    url = f"https://suggestqueries.google.com/complete/search?client=firefox&ds=yt&q={query}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        suggestions = response.json()[1]
        return suggestions
    except requests.RequestException as e:
        st.error(f"Erreur lors de la r√©cup√©ration des suggestions : {e}")
        return []

def build_suggestion_tree(root_keyword: str) -> dict:
    """
    Construit un arbre de suggestions.
    - Les 10 premi√®res suggestions du mot-cl√© de d√©part.
    - Pour chaque suggestion, r√©cup√®re les suggestions associ√©es.
    """
    tree = defaultdict(list)
    root_suggestions = fetch_suggestions(root_keyword)[:10]  # 10 premi√®res suggestions pour le mot-cl√© de d√©part
    for suggestion in root_suggestions:
        tree[root_keyword].append(suggestion)
        # R√©cup√®re les suggestions associ√©es pour chaque suggestion
        associated_suggestions = fetch_suggestions(suggestion)[:10]
        tree[suggestion].extend(associated_suggestions)
    return tree

def display_treemap(tree: dict):
    """Affiche une tree map pour visualiser les relations entre suggestions."""
    data = []
    for parent, children in tree.items():
        for child in children:
            data.append({"Parent": parent, "Child": child})

    # Conversion en DataFrame pour Plotly
    import pandas as pd
    df = pd.DataFrame(data)

    # G√©n√©rer la tree map
    fig = px.treemap(
        df,
        path=["Parent", "Child"],
        values=None,  # Pas de valeur sp√©cifique, juste pour la structure
        title="Relations des suggestions YouTube",
        color_discrete_sequence=px.colors.qualitative.Pastel  # Palette de couleurs
    )
    st.plotly_chart(fig, use_container_width=True)

# Interface utilisateur Streamlit
def main():
    st.title("üîç YouTube Suggest Explorer")
    st.write("Entrez un mot-cl√© pour explorer les suggestions de recherche YouTube et leurs relations sous forme de tree map.")
    
    # Champ pour saisir le mot-cl√©
    root_keyword = st.text_input("Entrez un mot-cl√© :", placeholder="Exemple : SEO YouTube")
    
    # Bouton pour lancer l'exploration
    if st.button("Explorer les suggestions"):
        if not root_keyword.strip():
            st.error("Veuillez entrer un mot-cl√© valide.")
        else:
            st.info("Recherche des suggestions en cours...")
            tree = build_suggestion_tree(root_keyword)
            if tree:
                st.success("Suggestions r√©cup√©r√©es avec succ√®s.")
                display_treemap(tree)
            else:
                st.warning("Aucune suggestion trouv√©e.")

if __name__ == "__main__":
    main()
