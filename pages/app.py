import requests
from typing import Optional
from youtube_transcript_api import YouTubeTranscriptApi, CouldNotRetrieveTranscript
import json
import openai
import streamlit as st

# Configuration de la page Streamlit
st.set_page_config(
    layout="wide",
    page_title="SEO Youtube",
    page_icon="ðŸŽ¥"
)

def GPT35(prompt, systeme, secret_key, temperature=0.7, model="gpt-4o-mini", max_tokens=1200):
    url = "https://api.openai.com/v1/chat/completions"

    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": systeme},
            {"role": "user", "content": prompt}
        ],
        "temperature": temperature,
        "max_tokens": max_tokens
    }

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {secret_key}"
    }

    response = requests.post(url, headers=headers, json=payload)
    if response.status_code == 401:
        st.error("Unauthorized access to OpenAI API. Please check your API key.")
        return ""
    response.raise_for_status()
    return response.json()["choices"][0]["message"]["content"]

def generate_optimized_title(api_key: str, video_title: str, transcript: str, video_description: str) -> str:
    prompt = (f"Analyse le titre: {video_title}, la description: {video_description} et le contenu {transcript} suivant d'une vidÃ©o YouTube et gÃ©nÃ¨re une version optimisÃ©e pour le rÃ©fÃ©rencement, en tenant compte des mots-clÃ©s, de l'engagement et des bonnes pratiques SEO")
    system_message = (f"Vous Ãªtes un assistant de rÃ©daction compÃ©tent et expÃ©rimentÃ©, spÃ©cialisÃ© dans l'optimisation SEO des contenus, "
    "et particuliÃ¨rement dans la crÃ©ation de titres optimisÃ©s pour YouTube. "
    "Votre mission est de rÃ©diger des titres engageants, informatifs et performants en termes de SEO, adaptÃ©s aux attentes de l'audience et aux bonnes pratiques de rÃ©fÃ©rencement. "
    "Voici le systÃ¨me Ã  suivre pour rÃ©diger une title YouTube optimisÃ©e pour le SEO : "
    "Identifier le sujet principal : DÃ©finir le thÃ¨me ou le sujet de la vidÃ©o et lâ€™objectif principal (informer, expliquer, divertir, vendre). "
    "Prioriser les mots-clÃ©s avec un fort volume de recherche et une concurrence modÃ©rÃ©e/faible. ConsidÃ©rer les variantes spÃ©cifiques liÃ©es Ã  la niche ou au public cible. "
    "Structure optimale de la title : Placer le mot-clÃ© principal au dÃ©but pour maximiser sa visibilitÃ©. "
    "Ajouter un mot-clÃ© secondaire ou un complÃ©ment descriptif. InsÃ©rer des Ã©lÃ©ments engageants (chiffres, questions, superlatifs) pour inciter au clic. Utiliser les ? et ! pour impacter. "
    "Utilisation des bonnes pratiques SEO : Respecter une longueur idÃ©ale de 50 Ã  60 caractÃ¨res pour Ã©viter la coupure dans les rÃ©sultats de recherche. "
    "Utiliser un langage clair, simple et engageant. Ã‰viter les titres vagues ou gÃ©nÃ©riques."
    "Utiliser 1 ou 2 Ã©mojis pertinents pour capter lâ€™attention. Mais ne mets JAMAIS 2 Ã©mojis a la suite. Utiliser les majuscules avec parcimonie pour mettre en valeur des mots-clÃ©s ou des Ã©lÃ©ments importants. "
    "Incorporer des Ã©lÃ©ments attractifs : Ajouter un aspect unique ou une promesse claire (ex. : 'En 5 minutes', 'Sans expÃ©rience'). "
    "Mettre en avant une solution ou un avantage spÃ©cifique. Poser une question pour capter lâ€™attention ou susciter la curiositÃ©. "
    "Adapter au format vidÃ©o et Ã  l'audience : Pour des tutoriels, utiliser des formats comme 'Comment...', 'Guide pour...', 'Tuto'. "
    "Pour des classements ou listes, utiliser 'Top X', 'Les X meilleurs...'. Pour des actualitÃ©s ou analyses, inclure des termes comme '2024', 'Tendances', 'Analyse'."
    "RÃ©ponds UNIQUEMENT avec la RÃ©ponse."
    )
    return GPT35(prompt, system_message, api_key)

def generate_optimized_description(api_key: str, video_description: str, transcript: str, video_title:str) -> str:
    if not video_description:
        return "No Original Description"

    prompt = (f"Analyse la description: {video_description}, le contenu :{transcript} et le titre: {video_title} suivante d'une vidÃ©o YouTube et gÃ©nÃ¨re une description optimisÃ©e pour le rÃ©fÃ©rencement")
    system_message = (f"Vous Ãªtes un assistant de rÃ©daction compÃ©tent et expÃ©rimentÃ©, spÃ©cialisÃ© dans l'optimisation SEO des contenus, "
    "et particuliÃ¨rement dans la crÃ©ation de descriptions optimisÃ©es pour YouTube. "
    "Votre mission est de rÃ©diger des descriptions de vidÃ©os engageantes, informatives et performantes en termes de SEO, adaptÃ©es aux attentes de l'audience et aux bonnes pratiques de rÃ©fÃ©rencement. "
    "Voici le systÃ¨me Ã  suivre pour rÃ©diger une description YouTube optimisÃ©e pour le SEO : "
    "Identifier le sujet principal : DÃ©finir le thÃ¨me ou le sujet de la vidÃ©o et lâ€™objectif principal (informer, expliquer, divertir, vendre). "
    "Inclure des mots-clÃ©s pertinents liÃ©s au contenu de la vidÃ©o. "
    "Ajouter des variantes spÃ©cifiques pour maximiser la visibilitÃ© et couvrir des requÃªtes similaires. "
    "Structure optimale de la description : La premiere phrase doit etre une question incitant TRES impactante pour le viewer en lien avec le mot clÃ© principal. Utilise l'emoji ðŸ‘‡ juste apres la question. "
    "Inclure des hashtags pertinents : Ajouter 8 Ã  10 hashtags stratÃ©giques Ã  la fin de la description pour amÃ©liorer la recherche. "
    "DÃ©velopper un rÃ©sumÃ© clair et attrayant du contenu de la vidÃ©o dans les premiÃ¨res lignes. "
    "Inclure des phrases contenant des mots-clÃ©s secondaires et des complÃ©ments pertinents. "
    "Utilisation des bonnes pratiques SEO : Respecter une longueur idÃ©ale entre 400 et 500 caractÃ¨res pour maximiser la visibilitÃ© dans les rÃ©sultats de recherche. "
    "Utiliser un langage clair, simple et engageant. Ã‰viter les descriptions vagues, gÃ©nÃ©riques ou trop rÃ©pÃ©titives. "
    "Ajouter des Ã©lÃ©ments attractifs : Mettre en avant un aspect unique de la vidÃ©o, une promesse claire ou un avantage spÃ©cifique (ex. : 'Apprenez en 5 minutes', 'Sans expÃ©rience'). "
    "Poser une question pour inciter Ã  lâ€™engagement dans les commentaires ou Ã  cliquer sur la vidÃ©o. "
    "Adapter au format vidÃ©o et Ã  l'audience : Pour des tutoriels, commencer par 'Comment...', 'DÃ©couvrez...', 'Guide pour...'. "
    "Pour des classements ou listes, utiliser 'Top X', 'Les X meilleurs...'. Pour des analyses ou actualitÃ©s, inclure des termes comme '2024', 'Tendances', 'Analyse'. "
    "Ajouter des appels Ã  lâ€™action : Inclure des CTA (Call To Action) pour inviter les spectateurs Ã  liker, sâ€™abonner ou visiter un lien spÃ©cifique. "
    "Votre prioritÃ© est de produire des descriptions engageantes et performantes en termes de SEO, tout en captant lâ€™intÃ©rÃªt des spectateurs."
    "RÃ©ponds UNIQUEMENT avec la RÃ©ponse."
    )
    return GPT35(prompt, system_message, api_key)

def get_video_details(api_key: str, video_url: str) -> Optional[dict]:
    try:
        video_id = video_url.split("v=")[-1].split("&")[0]
        url = f"https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id={video_id}&key={api_key}"
        response = requests.get(url)
        response.raise_for_status()
        video_data = response.json().get('items', [])[0]

        return {
            'title': video_data['snippet']['title'],
            'description': video_data['snippet']['description'],
            'views': int(video_data['statistics'].get('viewCount', 0)),
            'published_at': video_data['snippet']['publishedAt'],
            'channel_title': video_data['snippet']['channelTitle'],
            'video_id': video_id
        }
    except Exception as e:
        st.error(f"Error fetching video details: {e}")
        return None

def main():
    st.title("YouTube SEO Assistant")

    with st.sidebar:
        youtube_api_key = st.text_input("Enter your YouTube API key:")
        openai_api_key = st.text_input("Enter your OpenAI API key:")

    video_url = st.text_input("Enter the YouTube video URL:")

    if st.button("Optimize SEO"):
        if not youtube_api_key or not openai_api_key:
            st.error("Please provide both YouTube API key and OpenAI API key.")
        elif not video_url:
            st.error("Please provide a valid YouTube video URL.")
        else:
            video_details = get_video_details(youtube_api_key, video_url)
            if video_details:
                st.write("### Original Video Details")
                st.write(f"**Title:** {video_details['title']}")
                st.write(f"**Description:** {video_details['description']}")
                st.write(f"**Channel:** {video_details['channel_title']}")
                st.write(f"**Views:** {video_details['views']:,}")
                st.write(f"**Published At:** {video_details['published_at']}")

                try:
                    transcript = YouTubeTranscriptApi.get_transcript(video_details['video_id'])
                    transcript_text = " ".join([entry['text'] for entry in transcript])
                except CouldNotRetrieveTranscript:
                    st.error("Could not retrieve transcript for the video.")
                    transcript_text = ""

                optimized_title = generate_optimized_title(openai_api_key, video_details['title'], transcript_text, video_details['description'])
                optimized_description = generate_optimized_description(openai_api_key, video_details['description'], transcript_text, video_details['title'])

                st.write("### Optimized Video Details")
                st.write(f"**Optimized Title:** {optimized_title}")
                st.write(f"**Optimized Description:** {optimized_description}")

if __name__ == "__main__":
    main()
